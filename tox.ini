# SPDX-License-Identifier: Apache-2.0

[tox]
# py3-unit runs unit tests with 'python3'
# py311-unit runs the same tests with 'python3.11'
envlist = ruff, lint, mypy, py3-unit
minversion = 4.4

[testenv]
description = run tests (unit, unitcov)
deps = -r requirements-dev.txt
commands =
    unit: {envpython} -m pytest {posargs:tests}
    unitcov: {envpython} -W error::UserWarning -m pytest --cov=src --cov-report term --cov-report=html:coverage-{env_name} --cov-report=xml:coverage-{env_name}.xml --html=durations/{env_name}.html {posargs:tests -m "not (examples or slow)"}

[testenv:py3]
basepython = python3.11

[testenv:py3-unit]
basepython = {[testenv:py3]basepython}

[testenv:detect-exposed-workflow-secrets]
description = run Python unit tests (unit, unitcov)
change_dir = actions/detect-exposed-workflow-secrets/exposed_secrets_detection/
deps = 
    pytest-cov
    -r actions/detect-exposed-workflow-secrets/exposed_secrets_detection/requirements-dev.txt
commands =
    {envpython} -m pytest {posargs:tests}
    {envpython} -W error::UserWarning -m pytest --cov=src

# format, check, and linting targets don't build and install the project to
# speed up testing.
[testenv:lint]
description = lint with pylint
basepython = {[testenv:py3]basepython}
deps =
    pytest
    pylint>=2.16.2,<4.0
    pylint-pydantic
    pyyaml

commands =
    # detect-exposed-workflow-secrets
    {envpython} -m pylint --load-plugins pylint_pydantic actions/detect-exposed-workflow-secrets/exposed_secrets_detection

[testenv:fastlint]
description = fast lint with pylint (without 3rd party modules)
basepython = {[testenv:py3]basepython}
labels = fastverify
skip_install = true
skipsdist = true
deps = {[testenv:lint]deps}
## TODO: Update directories from `src/` and `test/` so the proper dirs can be linted
commands =
    {envpython} -m pylint \
        --load-plugins pylint_pydantic \
        --disable=import-error \
        actions

[testenv:ruff]
description = lint and format check with ruff
basepython = {[testenv:py3]basepython}
labels = fastverify
skip_install = True
skipsdist = true
# keep in sync with .pre-commit-config.yaml
deps =
    ruff==0.5.0
    isort==5.11.5
commands =
    ruff check .
    ruff format --diff .
    isort --check --diff .

[testenv:fix]
description = reformat and fix violations with ruff
basepython = {[testenv:py3]basepython}
skip_install = True
skipsdist = true
deps = {[testenv:ruff]deps}
commands =
    ruff check {posargs:--fix} .
    ruff format .
    isort .

[testenv:yamllint]
description = lint and format YAML test files
skip_install = true
skipsdist = true
deps =
  yamllint>=1.35.1
commands =
  yamllint .

[testenv:mypy]
description = Python type checking with mypy
basepython = {[testenv:py3]basepython}
deps =
  mypy>=1.10.0,<1.14
  types-PyYAML
  types-requests
  types-tqdm
  types-psutil
  pytest
  pydantic<=2.9.2
commands =
  mypy {posargs} actions

# This test environment is separate for 'launch-ec2-runner-with-fallback' rather than being a
# generic "bash" test env. We need the 'change_dir' specified for each bash test. Unfortunately,
# using 'cd' is not recognized even with 'allowlist_externals'
[testenv:launch-ec2-runner-with-fallback]
description = Test Bash scripts for launch-ec2-runner-with-fallback
skip_install = true
skipsdist = true
change_dir = actions/launch-ec2-runner-with-fallback/tests/
commands =
  # "UNIT" TESTS: launch-ec2-runner-with-fallback
  ./test_get_config_value.sh

[gh]
python =
    3.11 = py311-unitcov
    3.10 = py310-unitcov